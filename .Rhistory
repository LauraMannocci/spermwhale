ggplot2::coord_flip() +
ggplot2::ggtitle("all models") +
ggplot2::ylab("Contributions (%)") +
ggplot2::xlab("") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplot2::ggsave(here::here("outputs", "predictor_contributions_all_models.png"), g, width = 9, height = 7)
# predictor importance (requires to rebuild a maxent model)
impMod <- get_predictors_importance(modelStack, SPMod, BgMod, "modern")
impHis <- get_predictors_importance(modelStack, SPHis, BgHis, "historical")
impCom <- get_predictors_importance(modelStack, SPCom, BgCom, "combined")
# predictor importance - all models
dat <- rbind(impMod, impHis, impCom)
g <- ggplot2::ggplot(dat, ggplot2::aes(x = reorder(var, contrib), y = contrib, fill = type)) +
ggplot2::geom_bar(stat="identity", position="dodge") +
ggplot2::coord_flip() +
ggplot2::ggtitle("all models") +
ggplot2::ylab("Importance (%)") +
ggplot2::xlab("") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplot2::ggsave(here::here("outputs", "predictor_importance_all_models.png"), g, width = 9, height = 7)
# predictor importance (requires to rebuild a maxent model)
impMod <- get_predictors_importance(modelStack, SPMod, BgMod, "modern")
impHis <- get_predictors_importance(modelStack, SPHis, BgHis, "historical")
impCom <- get_predictors_importance(modelStack, SPCom, BgCom, "combined")
# predictor importance - all models
dat <- rbind(impMod, impHis, impCom)
g <- ggplot2::ggplot(dat, ggplot2::aes(x = reorder(var, contrib), y = contrib, fill = type)) +
ggplot2::geom_bar(stat="identity", position="dodge") +
ggplot2::coord_flip() +
ggplot2::ggtitle("all models") +
ggplot2::ylab("Importance (%)") +
ggplot2::xlab("") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
ggplot2::ggsave(here::here("outputs", "predictor_importance_all_models.png"), g, width = 9, height = 7)
# And these are the marginal response curves for the predictor variables with non-zero
# coefficients in our model. We define the y-axis to be the cloglog transformation, which
# is an approximation of occurrence probability (with assumptions) bounded by 0 and 1
# (Phillips et al. 2017).
#par(mfrow=c(2,11), mar=c(0.1,0.1,0.1,0.1))
jpeg(here::here("outputs", "partial_plot_combined.jpeg"), width = 1000, height = 700)
plot(mod.seqCom, type = "cloglog")
dev.off()
jpeg(here::here("outputs", "partial_plot_historical.jpeg"), width = 1000, height = 700)
plot(mod.seqHis, type = "cloglog")
dev.off()
jpeg(here::here("outputs", "partial_plot_modern.jpeg"), width = 1000, height = 700)
plot(mod.seqMod, type = "cloglog")
dev.off()
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
predHis <- ENMeval::eval.predictions(SPHis.x)[[opt.seqHis$tune.args]]
predCom <- ENMeval::eval.predictions(SPCom.x)[[opt.seqCom$tune.args]]
#comparison of  predictions
#Pearsons's correlation coefficients between predictions
predStack <- raster::stack(c(predCom, predHis, predMod))
names(predStack) <- c("combined", "historical", "modern")
jnk <- raster::layerStats(predStack, 'pearson', na.rm=T)
corr_matrix <- jnk$'pearson correlation coefficient'
corr_matrix
#residuals
modelHis <- lm(raster::getValues(predHis) ~ raster::getValues(predCom), na.action=na.exclude)
rHis <- predHis
rHis[] <- residuals.lm(modelHis)
plot(rHis)
modelMod <- lm(raster::getValues(predMod) ~ raster::getValues(predCom), na.action=na.exclude)
rMod <- predMod
rMod[] <- residuals.lm(modelMod)
plot(rMod)
modelCom <- lm(raster::getValues(predCom) ~ raster::getValues(predCom), na.action=na.exclude)
rCom <- predCom
rCom[] <- residuals.lm(modelCom)
plot(rCom)
#plot predictions and histogram
### get contries for plotting
wio <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") #world map with 50m resolution
### convert prediction rasters to dataframes for plotting
df_predCom <- as(predCom, "SpatialPixelsDataFrame")
df_predCom <- as.data.frame(df_predCom)
colnames(df_predCom) <- c("value", "x", "y")
df_predCom$type <- factor(c('Combined'))
df_predHis <- as(predHis, "SpatialPixelsDataFrame")
df_predHis <- as.data.frame(df_predHis)
colnames(df_predHis) <- c("value", "x", "y")
df_predHis$type <- factor(c('Historical'))
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
# bind prediction dataframes
df_pred <- rbind(df_predCom, df_predHis, df_predMod)
### Extract MPA shapefiles and prediction values to test for "residual" mpa
# mask predictions with mpa and convert to dataframe
mpaCom <- raster::mask(predCom, mpa_sf)
df_mpaCom <- as(mpaCom, "SpatialPixelsDataFrame")
df_mpaCom <- as.data.frame(df_mpaCom)
colnames(df_mpaCom) <- c("value", "x", "y")
mpaHis <- raster::mask(predHis, mpa_sf)
df_mpaHis <- as(mpaHis, "SpatialPixelsDataFrame")
df_mpaHis <- as.data.frame(df_mpaHis)
colnames(df_mpaHis) <- c("value", "x", "y")
mpaMod <- raster::mask(predMod, mpa_sf)
df_mpaMod <- as(mpaMod, "SpatialPixelsDataFrame")
df_mpaMod <- as.data.frame(df_mpaMod)
colnames(df_mpaMod) <- c("value", "x", "y")
### kruskall tests of predictions in mpa vs all predictions
df_mpaCom$type <- factor(c('mpa'))
df_predCom$type <- factor(c('region'))
df_Com_MPA <- rbind(df_predCom, df_mpaCom)
df_Com_MPA$model <- factor(c('Combined'))
kruskal.test(value ~ type, data = df_Com_MPA)
df_mpaHis$type <- factor(c('mpa'))
df_predHis$type <- factor(c('region'))
df_His_MPA <- rbind(df_predHis, df_mpaHis)
df_His_MPA$model <- factor(c('Historical'))
kruskal.test(value ~ type, data = df_His_MPA)
df_mpaMod$type <- factor(c('mpa'))
df_predMod$type <- factor(c('region'))
df_Mod_MPA <- rbind(df_predMod, df_mpaMod)
df_Mod_MPA$model <- factor(c('Modern'))
kruskal.test(value ~ type, data = df_Mod_MPA)
df_mpa <- rbind(df_mpaCom, df_mpaHis, df_mpaMod)
summary(df_mpa)
### wilcox test
pairwise.wilcox.test(df_mpa$value, df_mpa$type, p.adjust.method = 'BH')
### density plot
df_mpa <- rbind(df_Com_MPA, df_His_MPA, df_Mod_MPA)
df_mpa$type <- factor(df_mpa$type , levels=c("region", "mpa"))
summary(df_mpa)
df_mpa <- df_mpa %>%
dplyr::mutate(model = forcats::fct_relevel(model, levels = "Modern", "Historical", "Combined"))
d <- ggplot2::ggplot(data = df_mpa, ggplot2::aes(x = value, y = model, fill = model, alpha = type, linetype = type, scale = 0.9)) +
ggridges::geom_density_ridges() +
ggplot2::scale_fill_manual(values = c("#F8766D","#00BA38", "#619CFF")) +
ggplot2::scale_alpha_manual(values = c(0.6, .1)) +
ggplot2::xlab('Habitat suitability') +
ggplot2::ylab("") +
ggplot2::theme_light() +
ggplot2::theme(legend.position = "none", axis.text = ggplot2::element_text(size=12)) +
ggridges::stat_density_ridges(quantile_lines = TRUE, quantiles = 2)
ggplot2::ggsave(here::here("outputs", "density_plot_all_models.png"), d, width = 9, height = 7)
### plot predictions
gCom <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predCom, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Combined model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
ggplot2::ggsave(here::here("outputs", paste0("predictions_", "combined", ".png")), gCom, width = 9, height = 7)
gMod <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
ggplot2::ggsave(here::here("outputs", paste0("predictions_", "modern", ".png")), gMod, width = 9, height = 7)
gHis <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predHis, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Historical model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
ggplot2::ggsave(here::here("outputs", paste0("predictions_", "historical", ".png")), gHis, width = 9, height = 7)
#residuals
df_rHis <- as(rHis, "SpatialPixelsDataFrame")
df_rHis <- as.data.frame(df_rHis)
colnames(df_rHis) <- c("value", "x", "y")
df_rMod <- as(rMod, "SpatialPixelsDataFrame")
df_rMod <- as.data.frame(df_rMod)
colnames(df_rMod) <- c("value", "x", "y")
df_rCom <- as(rCom, "SpatialPixelsDataFrame")
df_rCom <- as.data.frame(df_rCom)
colnames(df_rCom) <- c("value", "x", "y")
ggHis <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_rHis, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(option = "inferno", limit = c(-0.34,0.71)) +
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("") +
ggplot2::xlab('Historical residuals') +
ggplot2::theme(legend.position ="none")
ggplot2::ggsave(here::here("outputs", paste0("residuals_", "historical", ".png")), ggHis, width = 9, height = 7)
ggMod <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_rMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(option = "inferno", limit = c(-0.34,0.71)) +
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("") +
ggplot2::xlab('Modern residuals') +
ggplot2::theme(legend.position ="none")
ggplot2::ggsave(here::here("outputs", paste0("residuals_", "modern", ".png")), ggMod, width = 9, height = 7)
ggCom <- ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_rCom, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(option = "inferno", limit = c(-0.34,0.71)) +
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("") +
ggplot2::xlab('Combined residuals') +
ggplot2::theme(legend.position ="none")
ggplot2::ggsave(here::here("outputs", paste0("residuals_", "combined", ".png")), ggCom, width = 9, height = 7)
### summary plot
sum <- cowplot::ggdraw() +
cowplot::draw_plot(mpaBP, 0, .66, .5, .33)+
cowplot::draw_plot(gCom, .46, .66, .55, .33) +
cowplot::draw_plot(gHis, 0, .33, .5, .33) +
cowplot::draw_plot(gMod, .45, .33, .5, .33) +
cowplot::draw_plot(ggHis, 0, 0, .5, .33) +
cowplot::draw_plot(ggMod, .46, 0, .55, .33) +
cowplot::draw_plot_label(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"), c(0, 0.5, 0, 0.5, 0, .5), c(1, 1, .69, .69, .36, .36), font = "italic", size = 15)
sum
jpeg(here::here("outputs", "summary_plot.jpeg"), width = 2300, height = 3000, res = 300)
sum
dev.off()
modelStack_BgMod
?dropLayer
raster::dropLayer(modelStack_BgMod, 5)
SPMod.x <- evaluate_model(SPMod,
modelStack_BgMod, # use limited rasters for modern
BgMod,
list(fc = c("L"), rm = 1:5), #only linear fc
list(occs.grp = cbMod$occs.grp, bg.grp = cbMod$bg.grp),
"modern")
####################  MODEL SELECTION AND OPTIMISATION
#select best model
opt.seqCom <- select_best_model(SPCom.x)
opt.seqMod <- select_best_model(SPMod.x)
opt.seqHis <- select_best_model(SPHis.x)
#write model metrics
Model_metrics <- rbind(opt.seqCom, opt.seqHis, opt.seqMod)
Model_metrics$type <- factor(c('Combined', 'Historical', 'Modern'))
write.csv(Model_metrics, here::here("outputs", "model_metrics.csv"))
# We can select a single model from the ENMevaluation object using the tune.args of our
# optimal model.
mod.seqCom <- ENMeval::eval.models(SPCom.x)[[opt.seqCom$tune.args]]
mod.seqHis <- ENMeval::eval.models(SPHis.x)[[opt.seqHis$tune.args]]
mod.seqMod <- ENMeval::eval.models(SPMod.x)[[opt.seqMod$tune.args]]
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
df_predMod
####################  MODEL SELECTION AND OPTIMISATION
#select best model
opt.seqCom <- select_best_model(SPCom.x)
opt.seqMod <- select_best_model(SPMod.x)
opt.seqHis <- select_best_model(SPHis.x)
#write model metrics
Model_metrics <- rbind(opt.seqCom, opt.seqHis, opt.seqMod)
Model_metrics$type <- factor(c('Combined', 'Historical', 'Modern'))
write.csv(Model_metrics, here::here("outputs", "model_metrics.csv"))
# We can select a single model from the ENMevaluation object using the tune.args of our
# optimal model.
mod.seqCom <- ENMeval::eval.models(SPCom.x)[[opt.seqCom$tune.args]]
mod.seqHis <- ENMeval::eval.models(SPHis.x)[[opt.seqHis$tune.args]]
mod.seqMod <- ENMeval::eval.models(SPMod.x)[[opt.seqMod$tune.args]]
# Here are the non-zero coefficients in our model.
coefCom <- tibble::enframe(mod.seqCom$betas)
coefHis <- tibble::enframe(mod.seqHis$betas)
coefMod <- tibble::enframe(mod.seqMod$betas)
coefCom$type <- factor(c('Combined'))
coefHis$type <- factor(c('Historical'))
coefMod$type <- factor(c('Modern'))
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
modelStack_BgMod
raster::dropLayer(modelStack_BgMod, 8)
SPMod.x <- evaluate_model(SPMod,
modelStack_BgMod, # use limited rasters for modern
BgMod,
list(fc = c("L"), rm = 1:5), #only linear fc
list(occs.grp = cbMod$occs.grp, bg.grp = cbMod$bg.grp),
"modern")
####################  MODEL SELECTION AND OPTIMISATION
#select best model
opt.seqCom <- select_best_model(SPCom.x)
opt.seqMod <- select_best_model(SPMod.x)
opt.seqHis <- select_best_model(SPHis.x)
#write model metrics
mod.seqCom <- ENMeval::eval.models(SPCom.x)[[opt.seqCom$tune.args]]
mod.seqHis <- ENMeval::eval.models(SPHis.x)[[opt.seqHis$tune.args]]
mod.seqMod <- ENMeval::eval.models(SPMod.x)[[opt.seqMod$tune.args]]
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
jjj
¨ "
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
mod.seqMod <- ENMeval::eval.models(SPMod.x)[[opt.seqMod$tune.args]]
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
modelStack_BgMod
raster::dropLayer(modelStack_BgMod, 8)
modelStack_BgMod
modelStack_BgMod <- raster::dropLayer(modelStack_BgMod, 5)
modelStack_BgMod
SPMod.x <- evaluate_model(SPMod,
modelStack_BgMod, # use limited rasters for modern
BgMod,
list(fc = c("L"), rm = 1:5), #only linear fc
list(occs.grp = cbMod$occs.grp, bg.grp = cbMod$bg.grp),
"modern")
opt.seqMod <- select_best_model(SPMod.x)
mod.seqMod <- ENMeval::eval.models(SPMod.x)[[opt.seqMod$tune.args]]
plot(mod.seqMod, type = "cloglog")
# predictions from selected model
predMod <- ENMeval::eval.predictions(SPMod.x)[[opt.seqMod$tune.args]] #limited raster
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
df_predMod <- as(predMod, "SpatialPixelsDataFrame")
df_predMod <- as.data.frame(df_predMod)
colnames(df_predMod) <- c("value", "x", "y")
df_predMod$type <- factor(c('Modern'))
ggplot2::ggplot() +
ggplot2::geom_sf(data = wio) +
ggplot2::geom_tile(data = df_predMod, ggplot2::aes(x = x, y = y, fill = value), alpha=0.8) +
ggplot2::scale_fill_viridis_c(limits = c(0, 1), option = "viridis")+
ggplot2::coord_sf(xlim = c(26, 85), ylim = c(-40, 25), expand = FALSE) +
ggplot2::ylab("")+
ggplot2::xlab("Modern model")+
ggplot2::labs(fill = 'Habitat \nsuitability')+
ggplot2::theme(legend.position = "right",
legend.justification = "left",
legend.margin = ggplot2::margin(0,0,0,0),
legend.box.margin = ggplot2::margin(-6,-10,-6,-10))
#load all functions in R
devtools::load_all()
plot_residuals_wrt_combined(predHis, predCom, wio, "historical")
plot_residuals_wrt_combined(predCom, predCom, wio, "combined")
ggHis <- plot_residuals_wrt_combined(predHis, predCom, wio, "historical")
ggMod <- plot_residuals_wrt_combined(modelMod, predCom, wio, "modern")
ggHis
ggMod <- plot_residuals_wrt_combined(predMod, predCom, wio, "modern")
#load all functions in R
devtools::load_all()
gMod <- plot_predictions(wio, df_predMod, "modern")
gMod
#load all functions in R
devtools::load_all()
gMod <- plot_predictions(wio, df_predMod, "modern")
gMod
gMod <- plot_predictions(wio, df_predMod, "modern")
gHis <- plot_predictions(wio, df_predHis, "historical")
gCom <- plot_predictions(wio, df_predCom, "combined")
#load all functions in R
devtools::load_all()
df_predCom <- convert_predictions_to_df(predCom, "combined")
df_predCom
df_predCom <- convert_predictions_to_df(predCom, "combined")
df_predHis <- convert_predictions_to_df(predHis, "historical")
df_predMod <- convert_predictions_to_df(predMod, "modern")
#load all functions in R
devtools::load_all()
test_mpa_effect(predCom, df_predCom, "combined")
#load all functions in R
devtools::load_all()
test_mpa_effect(predCom, df_predCom, "combined")
test_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
pred=predCom
df_pred=df_predCom
# mask predictions with mpa and convert to dataframe
mpamod <- raster::mask(pred, mpa_sf)
df_mpamod <- as(mpamod, "SpatialPixelsDataFrame")
df_mpamod <- as.data.frame(df_mpamod)
colnames(df_mpamod) <- c("value", "x", "y")
### kruskall tests of predictions in mpa vs all predictions
df_mpamod$type <- factor(c('mpa'))
df_pred$type <- factor(c('region'))
df_mpamod_pred <- rbind(df_pred, df_mpamod)
df_mpamod
df_pred
summary(df_pred)
summary(df_mpamod)
names(df_predCom)
#load all functions in R
devtools::load_all()
df_predCom <- convert_predictions_to_df(predCom, "combined")
df_predHis <- convert_predictions_to_df(predHis, "historical")
df_predMod <- convert_predictions_to_df(predMod, "modern")
# bind prediction dataframes
df_pred <- rbind(df_predCom, df_predHis, df_predMod)
test_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
#load all functions in R
devtools::load_all()
### test for "residual" mpa effect
test_residual_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
test_residual_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
test_residual_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
#load all functions in R
devtools::load_all()
df_mpaCom <- test_residual_mpa_effect(predCom, df_predCom, mpa_sf, "combined")
df_mpaHis <- test_residual_mpa_effect(predHis, df_predCom, mpa_sf, "combined")
df_mpaMod <- test_residual_mpa_effect(predMod, df_predCom, mpa_sf, "combined")
# load all functions in R
devtools::load_all()
